@tailwind base;
@tailwind components;
@tailwind utilities;

@import url("https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,500;0,700;0,900;1,400;1,500;1,700;1,900&family=Roboto+Mono:ital,wght@0,100..700;1,100..700&display=swap");

// Colour Contrast Checker: https://colourcontrast.cc/

html {
  @apply bg-white;

  transition: filter 500ms;
  &.dark {
    filter: hue-rotate(0.5turn) invert(0.93);
  }

  // Theme colors. They need to be linked from tailwind config.

  // A bright blue color used for various active elements on page.
  --tc-memo-active: #06b6d4;
  // A very light blue color for the background of popups, so that it is easier to see that they are opened.
  --tc-popup-bg: #f7fcfd;
  // A pale blue-grey color for highlighting hovered areas of active elements by setting their background color.
  // Not necessarily good for hovered buttons etc.
  --tc-hover: #e6f0f7;
  // A light blue color for currently selected areas of active elements.
  --tc-select: #b7e8f6;
  // A light grey color for the background of disabled elements.
  --tc-disabled: #ece8e8;
  // A grey color for the border of input elements.
  --tc-input-border: #b0b0b0;
  // A grey text for displaying additional information.
  --tc-grey-text: #566272;

  &.dark {
    --tc-disabled: #d2d2d2;
    * {
      // TODO: Figure out a cleaner way to disable shadows.
      --tw-shadow: transparent !important;
    }
  }
}

@layer base {
  // A darker version of the memo-active color, giving enough contrast on a white background, according to the WCAG tests.
  $memo-active-contrasted: color-mix(
    in srgb,
    rgb(from theme("colors.memo-active") r g b / var(--tw-text-opacity, 1)),
    black 30%
  );
  $memo-bg-active-contrasted: color-mix(
    in srgb,
    rgb(from theme("colors.memo-active") r g b / var(--tw-bg-opacity, 1)),
    black 30%
  );

  html {
    @apply font-main;

    --sb-thumb-color: color-mix(in srgb, theme("colors.memo-active") 80%, white);
    --sb-track-color: color-mix(in srgb, var(--sb-thumb-color) 20%, white);
    --sb-size: 14px;
  }

  // As of 2024-02-11, chrome ignores the ::-webkit-scrollbar* selectors if any of the standard scrollbar
  // properties is set, so ensure it is not set.
  @supports not selector(::-webkit-scrollbar) {
    * {
      scrollbar-color: var(--sb-thumb-color) var(--sb-track-color);
    }
  }

  *::-webkit-scrollbar {
    width: var(--sb-size);
    height: var(--sb-size);
  }

  *::-webkit-scrollbar-track {
    background: var(--sb-track-color);
    border-radius: 14px;
  }

  *::-webkit-scrollbar-thumb {
    background: var(--sb-thumb-color);
    border-radius: 14px;
    border: 4px solid var(--sb-track-color);
  }

  // Style of a grey, disabled-looking scrollbar.
  .disabledScrollBar {
    --sb-thumb-color: #bbb;
    --sb-track-color: #eee;
  }

  input[type="checkbox"] {
    transform: scale(1.2);
    &:checked {
      // Make it similar to the memo-active color on Chrome.
      filter: hue-rotate(-0.11turn);
    }
    &:disabled {
      filter: brightness(0.8);
      &:checked {
        filter: brightness(0.62) contrast(7);
      }
    }
  }

  progress {
    &::-webkit-progress-bar {
      @apply bg-gray-100;
    }
    &::-webkit-progress-value {
      @apply bg-memo-active;
      background-image: -webkit-linear-gradient(
        -45deg,
        transparent 30%,
        rgba(0, 0, 0, 0.2) 30%,
        rgba(0, 0, 0, 0.2) 70%,
        transparent 70%
      );
      background-size: 40px 100%;
    }
  }

  select {
    // Some versions of Chrome show this as grey.
    @apply bg-white;
  }

  a:not([role="button"]) {
    @apply underline;
    // Make sure this color gives enough contrast on a hovered table row, according to the WCAG tests.
    color: color-mix(in srgb, rgb(from theme("colors.memo-active") r g b / var(--tw-text-opacity, 1)), blue 45%);
  }

  button,
  [role="button"] {
    // Use [aria-disabled="true"] to match disabled elements (and not :disabled)
    // to support non-button elements with role="button".

    @mixin pressedWithShadow {
      transition: box-shadow 0.15s ease-out;
      &:active:not([aria-disabled="true"]) {
        @apply shadow-md;
      }
    }

    &.pressedWithShadow {
      @include pressedWithShadow;
    }

    &.primary {
      @apply p-2 rounded text-white;
      background-color: $memo-bg-active-contrasted;
      &[aria-disabled="true"] {
        @apply bg-opacity-50;
      }
      &:active:not([aria-disabled="true"]) {
        @apply bg-memo-active;
      }
      @include pressedWithShadow;
    }

    &.secondary {
      @apply p-2 min-h-8 rounded border border-memo-active;
      color: $memo-active-contrasted;
      &[aria-disabled="true"] {
        @apply text-opacity-50 border-opacity-50;
      }
      &:active:not([aria-disabled="true"]) {
        @apply bg-hover;
      }
      @include pressedWithShadow;
    }

    &.small {
      @apply px-1 py-0;
    }

    &.minimal {
      @apply px-0.5 -my-px border border-gray-300 rounded bg-white hover:bg-hover;

      &[aria-disabled="true"] {
        @apply opacity-50;
      }
    }
  }

  // Icons
  svg {
    // An icon displayed inline in text. It is black by default, and reacts to text-opacity-* classes.
    // Use the dimmed class to dim.
    &.inlineIcon {
      @apply shrink-0 inline mb-1 fill-current;
      &.strokeIcon {
        @apply stroke-current fill-none;
      }
    }

    // By default the fill color uses the current color, but with the strokeIcon class it's
    // the stroke color instead of fill color.
    @apply text-black;
    &.dimmed {
      @apply text-opacity-30;
    }
  }

  // Text that wraps text at natural wrapping points.
  .wrapText {
    @apply whitespace-pre-line;
    hyphens: auto;
  }
  // Text that wraps to always be fully visible.
  .wrapTextAnywhere {
    @apply wrapText;
    overflow-wrap: anywhere;
  }
}
