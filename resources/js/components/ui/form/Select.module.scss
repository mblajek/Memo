.select {
  @apply grow;

  > [data-part="control"] {
    --bg-color: white;
    &[data-disabled] {
      --bg-color: theme("colors.disabled");
    }

    @apply w-full min-h-big-input border border-input-border rounded aria-invalid:border-red-400;
    @apply relative;
    background-color: var(--bg-color);

    // Calculate the correct padding for the contents, taking into account the buttons on the right.
    --padding-x: 0.5rem;
    // Place for the down arrow button.
    --buttons-width: 16px;
    &:has(.clearButton) {
      --buttons-width: 34px;
    }
    --padding: 1px calc(var(--buttons-width) + var(--padding-x)) 1px var(--padding-x);

    > .buttons {
      @apply absolute top-0.5 bottom-0.5 right-0.5 flex items-center gap-0.5;
      background-color: var(--bg-color);

      button {
        width: 16px;
        max-height: 20px;
      }
    }

    &[data-disabled] > .buttons button svg {
      @apply text-opacity-30;
    }

    &[data-invalid] {
      @apply border-red-400;
    }
  }

  &.single > [data-part="control"] {
    // In the single mode, place .value and input in the same area using grid, and apply the computed
    // --padding to both of them. This way the input's outer size is the same as that of the whole
    // component, and it looks better when the input is active.
    @apply w-full h-full grid;

    > .value {
      @apply wrapTextAnywhere;
      @apply col-start-1 row-start-1 my-auto overflow-hidden;
      padding: var(--padding);
    }

    > [data-part="input"] {
      @apply col-start-1 row-start-1 min-w-0 rounded;
      padding: var(--padding);
      @apply bg-transparent;
    }
  }

  &.multiple > [data-part="control"] {
    // In the multiple mode, apply the computed --padding to the whole control, and use flex to place
    // the values and the input.
    --padding-x: 0.25rem;

    @apply w-full h-full overflow-hidden;
    padding: var(--padding);
    @apply flex flex-wrap items-center gap-0.5;

    > .value {
      @apply px-1 border border-input-border rounded flex gap-0.5;

      > .label {
        @apply wrapTextAnywhere;
      }
      > .delete {
        @apply px-0.5;
      }
    }

    &[data-disabled] > .value > button svg {
      @apply text-opacity-30;
    }

    > [data-part="input"] {
      @apply grow shrink basis-0;
      @apply rounded px-1;
      min-width: 2rem;
      // This entry is needed, otherwise the input grows too much, despite min-width and flex-basis.
      width: 2rem;
      @apply outline-none;
    }
  }

  &.small {
    > [data-part="control"] {
      @apply min-h-small-input;
      --padding-x: 0.25rem;
    }

    &.multiple > [data-part="control"] {
      > [data-part="input"] {
        @apply px-0;
      }
    }
  }
}

.selectPortal {
  &.isOpen[data-part="positioner"] {
    transition: transform 60ms;
  }

  > [data-part="content"] {
    @apply bg-popup-bg border rounded shadow-xl;
    @apply overflow-x-clip overflow-y-auto z-dropdown;
    max-height: var(--available-height);
    min-width: var(--reference-width);
    max-width: var(--available-width);

    > [data-part="item"] {
      @apply p-1 wrapTextAnywhere overflow-x-clip cursor-pointer text-black;

      &[data-disabled] {
        @apply text-opacity-60 cursor-default;
      }
    }
  }

  &:not(.loading) > [data-part="content"] > [data-part="item"] {
    &[data-highlighted] {
      @apply bg-hover;
    }
    // The checked rule must be below the highlighted rule.
    &[data-state="checked"] {
      @apply bg-select;
    }
  }

  &.loading {
    > [data-part="content"] {
      @apply bg-gray-200;
      > [data-part="item"] {
        @apply cursor-default text-opacity-40;
        * {
          @apply text-opacity-40;
        }
      }
    }
  }

  &.small {
    > [data-part="content"] > [data-part="item"] {
      @apply py-0.5;
    }
  }
}
